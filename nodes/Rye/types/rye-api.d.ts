/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/health': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Health
		 * @description Simple check to confirm the API is running and accessible.
		 */
		get: operations['GetHealth'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/brands/domain/{domain}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Brand by Domain
		 * @description Retrieve brand information by domain name
		 *
		 *     Look up a brand by its domain name (e.g. "aloyoga.com").
		 *     Returns brand information including the marketplace type if the lookup succeeds.
		 */
		get: operations['GetBrandByDomain'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/checkout-intents/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Checkout Intent by ID
		 * @description Retrieve a checkout intent by id
		 *
		 *     Returns checkout intent information if the lookup succeeds.
		 */
		get: operations['GetCheckoutIntent'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/checkout-intents': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Checkout Intent
		 * @description Create a checkout intent with the given request body.
		 */
		post: operations['CreateCheckoutIntent'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/checkout-intents/{id}/confirm': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Confirm Checkout Intent
		 * @description Confirm a checkout intent with provided payment information
		 *
		 *     Confirm means we have buyer's name, address and payment info, so we can
		 *     move forward to place the order.
		 */
		post: operations['ConfirmCheckoutIntent'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/checkout-intents/{id}/payment': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * POST add payment method to checkout intent
		 * @description Add payment details to a checkout intent
		 */
		post: operations['AddPaymentDetailsToCheckoutIntent'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** @enum {string} */
		Marketplace: 'AMAZON' | 'SHOPIFY' | 'UNKNOWN';
		Brand: {
			/**
			 * @description If `false`, then products from this brand cannot be purchased through the
			 *     Sell Anything API.
			 */
			supported: boolean;
			/** @description Indicates what ecommerce platform the brand uses. */
			marketplace: components['schemas']['Marketplace'];
			/** @description A unique identifier for the brand. */
			id: string;
		};
		AuthenticationError: {
			name: string;
			message: string;
			stack?: string;
		};
		NotFoundError: {
			name: string;
			message: string;
			stack?: string;
		};
		FieldErrors: {
			[key: string]: {
				value?: unknown;
				message: string;
			};
		};
		ValidateError: {
			name: string;
			message: string;
			stack?: string;
			/** Format: double */
			status: number;
			fields: components['schemas']['FieldErrors'];
		};
		RuntimeError: {
			name: string;
			message: string;
			stack?: string;
		};
		/**
		 * Format: hostname
		 * @description Represents a valid domain name string.
		 * @example shop.aloyoga.com
		 */
		Domain: string;
		Buyer: {
			/** @example 10001 */
			postalCode: string;
			/** @example US */
			country: string;
			/** @example NY */
			province: string;
			/** @example New York */
			city: string;
			/** @example Apt 1 */
			address2?: string;
			/** @example 123 Main St */
			address1: string;
			/** @example 5555555555 */
			phone: string;
			/** @example john.doe@example.com */
			email: string;
			/** @example Doe */
			lastName: string;
			/** @example John */
			firstName: string;
		};
		/** @description Represents variant selections for a product, such as size, color, etc. */
		VariantSelection: {
			/**
			 * @description The value of the variant being selected. Match this value with what is used on the product page.
			 * @example Small, Red, XS, L, etc.
			 */
			value: string | number;
			/**
			 * @description The label of the variant being selected. Match this label with what is used on the product page.
			 * @example Size, Color, etc.
			 */
			label: string;
		};
		BaseCheckoutIntent: {
			variantSelections?: components['schemas']['VariantSelection'][];
			buyer: components['schemas']['Buyer'];
			/** Format: integer */
			quantity: number;
			productUrl: string;
			/** Format: date-time */
			createdAt: string;
			id: string;
		};
		RetrievingOfferCheckoutIntent: components['schemas']['BaseCheckoutIntent'] & {
			/** @enum {string} */
			state: 'retrieving_offer';
		};
		Money: {
			currencyCode: string;
			/** Format: double */
			amountSubunits: number;
		};
		Cost: {
			total: components['schemas']['Money'];
			discount?: components['schemas']['Money'];
			tax?: components['schemas']['Money'];
			shipping?: components['schemas']['Money'];
			subtotal: components['schemas']['Money'];
		};
		ShippingOption: {
			cost: components['schemas']['Money'];
			id: string;
		};
		Shipping: {
			availableOptions: components['schemas']['ShippingOption'][];
			selectedOptionId?: string;
		};
		Offer: {
			shipping: components['schemas']['Shipping'];
			cost: components['schemas']['Cost'];
		};
		AwaitingConfirmationCheckoutIntent: components['schemas']['BaseCheckoutIntent'] & {
			offer: components['schemas']['Offer'];
			/** @enum {string} */
			state: 'awaiting_confirmation';
		};
		StripeTokenPaymentMethod: {
			/** @example tok_1RkrWWHGDlstla3f1Fc7ZrhH */
			stripeToken: string;
			/**
			 * @example stripe_token
			 * @enum {string}
			 */
			type: 'stripe_token';
		};
		PaymentMethod: components['schemas']['StripeTokenPaymentMethod'];
		PlacingOrderCheckoutIntent: components['schemas']['BaseCheckoutIntent'] & {
			paymentMethod: components['schemas']['PaymentMethod'];
			offer: components['schemas']['Offer'];
			/** @enum {string} */
			state: 'placing_order';
		};
		CompletedCheckoutIntent: components['schemas']['BaseCheckoutIntent'] & {
			paymentMethod: components['schemas']['PaymentMethod'];
			offer: components['schemas']['Offer'];
			/** @enum {string} */
			state: 'completed';
		};
		/** @enum {string} */
		FailureReasonCode:
			| 'checkout_intent_expired'
			| 'payment_failed'
			| 'insufficient_stock'
			| 'product_out_of_stock'
			| 'offer_retrieval_failed'
			| 'order_placement_failed'
			| 'developer_not_found'
			| 'missing_shipping_method'
			| 'unsupported_currency'
			| 'unsupported_store_no_guest_checkout';
		FailureReason: {
			message: string;
			code: components['schemas']['FailureReasonCode'];
		};
		FailedCheckoutIntent: components['schemas']['BaseCheckoutIntent'] & {
			failureReason: components['schemas']['FailureReason'];
			paymentMethod?: components['schemas']['PaymentMethod'];
			offer?: components['schemas']['Offer'];
			/** @enum {string} */
			state: 'failed';
		};
		CheckoutIntent:
			| components['schemas']['RetrievingOfferCheckoutIntent']
			| components['schemas']['AwaitingConfirmationCheckoutIntent']
			| components['schemas']['PlacingOrderCheckoutIntent']
			| components['schemas']['CompletedCheckoutIntent']
			| components['schemas']['FailedCheckoutIntent'];
		CheckoutIntentPostParams: {
			variantSelections?: components['schemas']['VariantSelection'][];
			buyer: components['schemas']['Buyer'];
			/** Format: integer */
			quantity: number;
			productUrl: string;
		};
		CheckoutIntentConfirmParams: {
			paymentMethod: components['schemas']['PaymentMethod'];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	GetHealth: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						message: string;
						status: string;
					};
				};
			};
		};
	};
	GetBrandByDomain: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The domain name to look up (e.g. "aloyoga.com") */
				domain: components['schemas']['Domain'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Brand information including marketplace classification */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Brand'];
				};
			};
			/** @description Authentication Failed */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthenticationError'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['NotFoundError'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ValidateError'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RuntimeError'];
				};
			};
		};
	};
	GetCheckoutIntent: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The id of the checkout intent to look up */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Checkout intent information */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CheckoutIntent'];
				};
			};
			/** @description Authentication Failed */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthenticationError'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['NotFoundError'];
				};
			};
		};
	};
	CreateCheckoutIntent: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CheckoutIntentPostParams'];
			};
		};
		responses: {
			/** @description Created */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CheckoutIntent'];
				};
			};
			/** @description Authentication Failed */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthenticationError'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ValidateError'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RuntimeError'];
				};
			};
		};
	};
	ConfirmCheckoutIntent: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The id of the checkout intent to confirm */
				id: string;
			};
			cookie?: never;
		};
		/** @description The request body containing the payment information */
		requestBody: {
			content: {
				'application/json': components['schemas']['CheckoutIntentConfirmParams'];
			};
		};
		responses: {
			/** @description The confirmed checkout intent */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CheckoutIntent'];
				};
			};
			/** @description Authentication Failed */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthenticationError'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['NotFoundError'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RuntimeError'];
				};
			};
		};
	};
	AddPaymentDetailsToCheckoutIntent: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The id of the checkout intent to add payment details to */
				id: string;
			};
			cookie?: never;
		};
		/** @description The request body containing the payment details */
		requestBody: {
			content: {
				'application/json': Record<string, never>;
			};
		};
		responses: {
			/** @description Payment response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CheckoutIntent'];
				};
			};
			/** @description Authentication Failed */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthenticationError'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['NotFoundError'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RuntimeError'];
				};
			};
		};
	};
}
